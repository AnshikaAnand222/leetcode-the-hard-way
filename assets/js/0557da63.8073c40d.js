"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[4581],{3905:function(t,n,e){e.d(n,{Zo:function(){return p},kt:function(){return d}});var r=e(7294);function i(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t}function o(t,n){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable}))),e.push.apply(e,r)}return e}function a(t){for(var n=1;n<arguments.length;n++){var e=null!=arguments[n]?arguments[n]:{};n%2?o(Object(e),!0).forEach((function(n){i(t,n,e[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):o(Object(e)).forEach((function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))}))}return t}function u(t,n){if(null==t)return{};var e,r,i=function(t,n){if(null==t)return{};var e,r,i={},o=Object.keys(t);for(r=0;r<o.length;r++)e=o[r],n.indexOf(e)>=0||(i[e]=t[e]);return i}(t,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(r=0;r<o.length;r++)e=o[r],n.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(t,e)&&(i[e]=t[e])}return i}var l=r.createContext({}),s=function(t){var n=r.useContext(l),e=n;return t&&(e="function"==typeof t?t(n):a(a({},n),t)),e},p=function(t){var n=s(t.components);return r.createElement(l.Provider,{value:n},t.children)},c={inlineCode:"code",wrapper:function(t){var n=t.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(t,n){var e=t.components,i=t.mdxType,o=t.originalType,l=t.parentName,p=u(t,["components","mdxType","originalType","parentName"]),m=s(e),d=i,v=m["".concat(l,".").concat(d)]||m[d]||c[d]||o;return e?r.createElement(v,a(a({ref:n},p),{},{components:e})):r.createElement(v,a({ref:n},p))}));function d(t,n){var e=arguments,i=n&&n.mdxType;if("string"==typeof t||i){var o=e.length,a=new Array(o);a[0]=m;var u={};for(var l in n)hasOwnProperty.call(n,l)&&(u[l]=n[l]);u.originalType=t,u.mdxType="string"==typeof t?t:i,a[1]=u;for(var s=2;s<o;s++)a[s]=e[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,e)}m.displayName="MDXCreateElement"},754:function(t,n,e){e.r(n),e.d(n,{assets:function(){return p},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return u},metadata:function(){return s},toc:function(){return c}});var r=e(7462),i=e(3366),o=(e(7294),e(3905)),a=["components"],u={description:"Author: @wingkwong | https://leetcode.com/problems/sort-an-array/"},l="0921 - Sort an Array (Medium)",s={unversionedId:"0900-0999/sort-an-array-medium",id:"0900-0999/sort-an-array-medium",title:"0921 - Sort an Array (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/sort-an-array/",source:"@site/solutions/0900-0999/0921-sort-an-array-medium.md",sourceDirName:"0900-0999",slug:"/0900-0999/sort-an-array-medium",permalink:"/solutions/0900-0999/sort-an-array-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/solutions/0900-0999/0921-sort-an-array-medium.md",tags:[],version:"current",lastUpdatedBy:"Wing-Kam Wong",lastUpdatedAt:1652366253,formattedLastUpdatedAt:"5/12/2022",sidebarPosition:921,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/sort-an-array/"},sidebar:"tutorialSidebar",previous:{title:"0900 - 0999",permalink:"/solutions/0900-0999/"},next:{title:"0936 - Stamping The Sequence (Hard)",permalink:"/solutions/0900-0999/stamping-the-sequence-hard"}},p={},c=[{value:"Problem Statement ",id:"problem-statement-",level:2},{value:"Approach 1: STL",id:"approach-1-stl",level:2},{value:"Standard STL Sort",id:"standard-stl-sort",level:3},{value:"Stable STL Sort",id:"stable-stl-sort",level:3},{value:"Approach 2: Quick Sor",id:"approach-2-quick-sor",level:2},{value:"Quick Sort with Fixed Pivot (TLE)",id:"quick-sort-with-fixed-pivot-tle",level:3},{value:"Quick Sort with Randomised Pivot",id:"quick-sort-with-randomised-pivot",level:3}],m={toc:c};function d(t){var n=t.components,e=(0,i.Z)(t,a);return(0,o.kt)("wrapper",(0,r.Z)({},m,e,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"0921---sort-an-array-medium"},"0921 - Sort an Array (Medium)"),(0,o.kt)("h2",{id:"problem-statement-"},"Problem Statement"," "),(0,o.kt)("p",null,"Given an array of integers ",(0,o.kt)("inlineCode",{parentName:"p"},"nums"),", sort the array in ascending order."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 1:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: nums = [5,2,3,1]\nOutput: [1,2,3,5]\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 2:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: nums = [5,1,1,2,0,0]\nOutput: [0,0,1,1,2,5]\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Constraints:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"1 <= nums.length <= 5 * 10^4")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"-5 * 10^4 <= nums[i] <= 5 * 10^4"))),(0,o.kt)("h2",{id:"approach-1-stl"},"Approach 1: STL"),(0,o.kt)("h3",{id:"standard-stl-sort"},"Standard STL Sort"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"void standardSTLSort(vector<int>& nums) {\n    sort(nums.begin(), nums.end());\n}\n")),(0,o.kt)("h3",{id:"stable-stl-sort"},"Stable STL Sort"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"void stableSTLSort(vector<int>& nums) {\n    stable_sort(nums.begin(), nums.end());\n}\n")),(0,o.kt)("h2",{id:"approach-2-quick-sor"},"Approach 2: Quick Sor"),(0,o.kt)("h3",{id:"quick-sort-with-fixed-pivot-tle"},"Quick Sort with Fixed Pivot (TLE)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"int partition(vector<int>& nums, int l, int r) {\n    int pivot = nums[r];\n    int i = l - 1;\n    for (int j = l; j <= r - 1; j++) {\n        if (nums[j] < pivot) {\n            i++;\n            swap(nums[i], nums[j]);\n        }\n    }\n    swap(nums[i + 1], nums[r]);\n    return i + 1;\n}\n\nvoid quickSort(vector<int>& nums, int l, int r) {\n    if (l < r) {\n        int pivot = partition(nums, l, r);\n        quickSort(nums, l, pivot - 1);\n        quickSort(nums, pivot + 1, r);\n    }\n}\n")),(0,o.kt)("h3",{id:"quick-sort-with-randomised-pivot"},"Quick Sort with Randomised Pivot"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"int partition(vector<int>& nums, int l, int r) {\n    int pivot = nums[r];\n    int i = l - 1;\n    for (int j = l; j <= r - 1; j++) {\n        if (nums[j] < pivot) {\n            i++;\n            swap(nums[i], nums[j]);\n        }\n    }\n    swap(nums[i + 1], nums[r]);\n    return i + 1;\n}\n\nvoid quickSort(vector<int>& nums, int l, int r) {\n    if (l < r) {\n        swap(nums[l + rand() % (r - l)], nums[r]);\n        int pivot = partition(nums, l, r);\n        quickSort(nums, l, pivot - 1);\n        quickSort(nums, pivot + 1, r);\n    }\n}\n")))}d.isMDXComponent=!0}}]);