"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[93073],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=s(n),d=o,h=c["".concat(p,".").concat(d)]||c[d]||m[d]||a;return n?r.createElement(h,i(i({ref:t},u),{},{components:n})):r.createElement(h,i({ref:t},u))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=c;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var s=2;s<a;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},38783:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return p},default:function(){return b},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return m}});var r=n(87462),o=n(63366),a=(n(67294),n(3905)),i=["components"],l={description:"Author: @wingkwong | https://leetcode.com/problems/sort-the-people/"},p="2418 - Sort the People (Easy)",s={unversionedId:"2400-2499/sort-the-people-easy",id:"2400-2499/sort-the-people-easy",title:"2418 - Sort the People (Easy)",description:"Author: @wingkwong | https://leetcode.com/problems/sort-the-people/",source:"@site/solutions/2400-2499/2418-sort-the-people-easy.md",sourceDirName:"2400-2499",slug:"/2400-2499/sort-the-people-easy",permalink:"/leetcode-the-hard-way/solutions/2400-2499/sort-the-people-easy",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/2400-2499/2418-sort-the-people-easy.md",tags:[],version:"current",sidebarPosition:2418,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/sort-the-people/"},sidebar:"tutorialSidebar",previous:{title:"2406 - Divide Intervals Into Minimum Number of Groups (Medium)",permalink:"/leetcode-the-hard-way/solutions/2400-2499/divide-intervals-into-minimum-number-of-groups-medium"},next:{title:"2419 - Longest Subarray With Maximum Bitwise AND (Medium)",permalink:"/leetcode-the-hard-way/solutions/2400-2499/longest-subarray-with-maximum-bitwise-and-medium"}},u={},m=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Sorting",id:"approach-1-sorting",level:2}],c=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",t)}},d=c("Tabs"),h=c("TabItem"),f=c("SolutionAuthor"),g={toc:m};function b(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"2418---sort-the-people-easy"},"2418 - Sort the People (Easy)"),(0,a.kt)("h2",{id:"problem-link"},"Problem Link"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/sort-the-people/"},"https://leetcode.com/problems/sort-the-people/")),(0,a.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,a.kt)("p",null,"You are given an array of strings ",(0,a.kt)("inlineCode",{parentName:"p"},"names"),", and an array ",(0,a.kt)("inlineCode",{parentName:"p"},"heights")," that consists of ",(0,a.kt)("strong",{parentName:"p"},"distinct")," positive integers. Both arrays are of length ",(0,a.kt)("inlineCode",{parentName:"p"},"n"),"."),(0,a.kt)("p",null,"For each index ",(0,a.kt)("inlineCode",{parentName:"p"},"i"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"names[i]")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"heights[i]")," denote the name and height of the ",(0,a.kt)("inlineCode",{parentName:"p"},"ith")," person."),(0,a.kt)("p",null,"Return ",(0,a.kt)("inlineCode",{parentName:"p"},"names"),(0,a.kt)("em",{parentName:"p"},"sorted in ",(0,a.kt)("strong",{parentName:"em"},"descending")," order by the people's heights"),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Input: names = ["Mary","John","Emma"], heights = [180,165,170]\nOutput: ["Mary","Emma","John"]\nExplanation: Mary is the tallest, followed by Emma and John.\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Input: names = ["Alice","Bob","Bob"], heights = [155,185,150]\nOutput: ["Bob","Alice","Bob"]\nExplanation: The first Bob is the tallest, followed by Alice and the second Bob.\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"n == names.length == heights.length")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= n <= 103")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= names[i].length <= 20")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= heights[i] <= 10^5")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"names[i]")," consists of lower and upper case English letters."),(0,a.kt)("li",{parentName:"ul"},"All the values of ",(0,a.kt)("inlineCode",{parentName:"li"},"heights")," are distinct.")),(0,a.kt)("h2",{id:"approach-1-sorting"},"Approach 1: Sorting"),(0,a.kt)(d,{mdxType:"Tabs"},(0,a.kt)(h,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,a.kt)(f,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    vector<string> sortPeople(vector<string>& names, vector<int>& heights) {\n        vector<string> ans;\n        // {height, name}\n        vector<pair<int, string>> v;\n        // by putting height at first, we can skip writing a comparator as it'll sort by first element of the pair\n        for (int i = 0; i < names.size(); i++) v.push_back({heights[i], names[i]});\n        // sort in decreasing order\n        sort(v.rbegin(), v.rend());\n        // build the final ans. x.second is the name.\n        for (auto & x : v) ans.push_back(x.second);\n        return ans;\n    }\n};\n")))))}b.isMDXComponent=!0}}]);