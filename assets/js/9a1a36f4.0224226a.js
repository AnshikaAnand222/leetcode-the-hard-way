"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[94802],{3905:function(e,n,t){t.d(n,{Zo:function(){return d},kt:function(){return g}});var r=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var o=r.createContext({}),u=function(e){var n=r.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},d=function(e){var n=u(e.components);return r.createElement(o.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,l=e.originalType,o=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=u(t),g=i,c=p["".concat(o,".").concat(g)]||p[g]||m[g]||l;return t?r.createElement(c,a(a({ref:n},d),{},{components:t})):r.createElement(c,a({ref:n},d))}));function g(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var l=t.length,a=new Array(l);a[0]=p;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s.mdxType="string"==typeof e?e:i,a[1]=s;for(var u=2;u<l;u++)a[u]=t[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},98710:function(e,n,t){t.r(n),t.d(n,{assets:function(){return d},contentTitle:function(){return o},default:function(){return g},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return m}});var r=t(87462),i=t(63366),l=(t(67294),t(3905)),a=["components"],s={title:"Segment Tree",description:"",hide_table_of_contents:!1,keywords:["leetcode","template","segment tree"]},o=void 0,u={unversionedId:"segment-tree",id:"segment-tree",title:"Segment Tree",description:"",source:"@site/templates/segment-tree.md",sourceDirName:".",slug:"/segment-tree",permalink:"/leetcode-the-hard-way/templates/segment-tree",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/templates/segment-tree.md",tags:[],version:"current",frontMatter:{title:"Segment Tree",description:"",hide_table_of_contents:!1,keywords:["leetcode","template","segment tree"]},sidebar:"tutorialSidebar",previous:{title:"Ordered Set and GNU C++ PBDS",permalink:"/leetcode-the-hard-way/templates/ordered-set"},next:{title:"Sparse Table",permalink:"/leetcode-the-hard-way/templates/sparse-table"}},d={},m=[{value:"Example: Range Sum",id:"example-range-sum",level:2},{value:"Operations:",id:"operations",level:3}],p={toc:m};function g(e){var n=e.components,t=(0,i.Z)(e,a);return(0,l.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"example-range-sum"},"Example: Range Sum"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"struct segtree {\n    vector<long long> sums;\n    int size;\n    \n    void init(int n) {\n        size = 1;\n        while (size < n) size *= 2;\n        sums.assign(size * 2, 0LL);\n    }\n    \n    void set(int i, int v, int x, int lx, int rx) {\n        if (rx - lx == 1) {\n            sums[x] = v;\n            return;\n        }\n        int m = (lx + rx) / 2;\n        if (i < m) set(i, v, 2 * x + 1, lx, m);\n        else set(i, v, 2 * x + 2, m, rx);\n        sums[x] = sums[2 * x + 1] + sums[2 * x + 2];\n    }\n    \n    void set(int i, int v) {\n        set(i, v, 0, 0, size);\n    }\n    \n    long long sum(int l, int r, int x, int lx, int rx) {\n        if (lx >= r || l >= rx) return 0;\n        if (lx >= l && rx <= r) return sums[x];\n        int m = (lx + rx) / 2;\n        return sum(l, r, 2 * x + 1, lx, m) + sum(l, r, 2 * x + 2, m, rx);\n    }\n    \n    long long sum(int l, int r) {\n        return sum(l, r, 0, 0, size);\n    }\n};\n")),(0,l.kt)("p",null,"Sample Usage"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"int n = nums.size();\n\nst.init(n);\n// ...\nfor (int i = 0; i < n; i++) st.set(i, nums[i]);\n// ...\nst.set(index, val);\n// ...\nst.sum(left, right + 1)\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Segment Tree : Sum Template")," ",(0,l.kt)("br",null)),(0,l.kt)("h3",{id:"operations"},"Operations:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Find sum in particular range."),(0,l.kt)("li",{parentName:"ol"},"Point Update."),(0,l.kt)("li",{parentName:"ol"},"Range Update.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'// Query : TC: O(logN) for single query & O(NlogN) for n Queries\n// TC: O(NlogN);\n// SC: (4*N) ~ O(N);\nclass Segment\n{\n    vector<int> segmentTree, lazy;\n    int n;\npublic:\n    Segment(vector<int> &arr) {\n        this->n = arr.size();\n\n        segmentTree.resize(4 * n + 1);\n        lazy.resize(4 * n + 1, 0);\n        buildSegmentTree(arr, 0, 0, n - 1);\n    }\n\n    void buildSegmentTree(vector<int> &arr, int ind, int left, int right) {\n        if (left == right){\n            segmentTree[ind] = arr[left];\n            return;\n        }\n\n        int mid = left + (right - left) / 2;\n\n        buildSegmentTree(arr, 2 * ind + 1, left, mid);\n        buildSegmentTree(arr, 2 * ind + 2, mid + 1, right);\n\n        segmentTree[ind] = segmentTree[2 * ind + 1] + segmentTree[2 * ind + 2];\n    }\n    \n    int sumBro(int ind, int left, int right, int l, int r) {\n        // Case 1 : IF current_segment comes under range...\n        if (left >= l && right <= r) {\n            return segmentTree[ind];\n        }\n\n        // Case 2 : If current_segement doesn\'t comes in range.... :then we return 0 as answer to not pick current segment\n        if (r < left || right < l)\n            return 0;\n\n        // Case 3 : If current_segement comes partitally...\n        int mid = left + (right - left) / 2;\n        \n        int leftSum = sumBro(2 * ind + 1, left, mid, l, r);\n        int rightSum = sumBro(2 * ind + 2, mid + 1, right, l, r);\n\n        return leftSum + rightSum;\n    }\n    int getSum(int l, int r) { return sumBro(0, 0, n-1, l, r); }\n\n    \n    void pointUpdate(int ind, int left, int right, int index, int value) {\n        // Doing Actual update at leaf node.\n        if (left == right){\n            segmentTree[ind] += value;\n            return ;\n        }\n\n        int mid = (left + right)/2;\n\n        // If index comes into left part, then we will update only left part and update complete component after if-else & vice versa\n        if (index <= mid) pointUpdate(2*ind+1, left, mid, index, value);\n        else pointUpdate(2*ind+2, mid+1, right, index, value);\n\n        segmentTree[ind] = segmentTree[2*ind+1] + segmentTree[2*ind+2];\n    }\n    void pointUpdateBro(int index, int value) { pointUpdate(0, 0, n-1, index, value); }\n\n    void lazyUpdate(int ind, int left, int right, int l, int r, int value){\n        // We always do : pending updates first, then actual update.\n        if(lazy[ind] != 0){\n            segmentTree[ind] += (right-left+1) * lazy[ind];\n\n            // Propagating lazy updates if current node is having childrens...\n            if(left != right) {\n                lazy[2*ind+1] += lazy[ind];\n                lazy[2*ind+2] += lazy[ind];\n            } \n\n            // we done updating, so make current lazy_updates = 0\n            lazy[ind] = 0;\n        }\n\n        // Case 1 : If current range comes outside...\n        if (right < l || r < left) return ;\n\n        // Case 2 : If current range comes inside... \n        if (left >= l && right <= r) {\n            segmentTree[ind] += (right-left+1) * value;\n\n            if(left != right){\n                lazy[2 * ind + 1] += value;\n                lazy[2 * ind + 2] += value;\n            }\n            return ;\n        }\n\n        // Case 3: Partial Overlap\n        int mid = left + (right - left)/2;\n\n        lazyUpdate(2 * ind + 1, left, mid, l, r, value);\n        lazyUpdate(2 * ind + 2, mid+1, right, l, r, value);\n\n        segmentTree[ind] = segmentTree[2 * ind + 1] + segmentTree[2 * ind + 2];\n    }\n    void lazyUpdateBro(int l, int r, int value) { lazyUpdate(0, 0, n-1, l, r, value); }\n\n    int querySumLazy(int ind, int left, int right, int l, int r) {\n        // Executing pending updates at first.\n        if (lazy[ind]){\n            segmentTree[ind] += (right - left + 1) * lazy[ind];\n            \n            // If current node is not leaf node, then we have to propagate updates to childrens.\n            if (left != right){\n                lazy[2*ind+1] += lazy[ind];\n                lazy[2*ind+2] += lazy[ind];\n            }\n            \n            // We, are done updating : )\n            lazy[ind] = 0;\n        }\n\n        // Case 1: If range is completely outside...\n        if (r < left || right < l || left > right) return 0;\n\n        // Case 2: If range is completely inside...\n        if (left >= l && right <= r) return segmentTree[ind];\n\n        // Case 3: If range is partially inside or partially outside...\n        int mid = (right + left)/2;\n        \n        int leftSide = querySumLazy(2*ind+1, left, mid, l, r);\n        int rightSide = querySumLazy(2*ind+2, mid+1, right, l, r);\n        \n        return leftSide + rightSide;\n    }\n    int getSumLazy(int l, int r) { return querySumLazy(0, 0, n- 1, l, r); }\n\n    void printSegmentTree() {\n        for(int i : segmentTree) cout<<i<<" "; \n        cout<<endl;\n    }\n\n    int printSegmentTreeSum() {\n        return segmentTree[0];\n    }\n};\n')),(0,l.kt)("p",null,"Sample Usage"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"vector<int> arr = {1, 2, 3, 4};\n\nSegment sT(arr);\n\nsT.pointUpdate(index, val);\nsT.lazyUpdateBro(left, right, value);\nsT.getSumLazy(left, right);\n")))}g.isMDXComponent=!0}}]);