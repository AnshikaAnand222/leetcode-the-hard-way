"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[36263],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return h}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,l=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=u(n),h=o,m=p["".concat(s,".").concat(h)]||p[h]||c[h]||l;return n?r.createElement(m,a(a({ref:t},d),{},{components:n})):r.createElement(m,a({ref:t},d))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=n.length,a=new Array(l);a[0]=p;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,a[1]=i;for(var u=2;u<l;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},59565:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return u},default:function(){return v},frontMatter:function(){return s},metadata:function(){return d},toc:function(){return p}});var r,o=n(87462),l=n(63366),a=(n(67294),n(3905)),i=["components"],s={description:"Author: @wingkwong | https://leetcode.com/problems/n-ary-tree-level-order-traversal/",tags:["Tree","Breadth-First Search"]},u="0429 - N-ary Tree Level Order Traversal (Medium)",d={unversionedId:"0400-0499/n-ary-tree-level-order-traversal-medium",id:"0400-0499/n-ary-tree-level-order-traversal-medium",title:"0429 - N-ary Tree Level Order Traversal (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/n-ary-tree-level-order-traversal/",source:"@site/solutions/0400-0499/0429-n-ary-tree-level-order-traversal-medium.md",sourceDirName:"0400-0499",slug:"/0400-0499/n-ary-tree-level-order-traversal-medium",permalink:"/leetcode-the-hard-way/solutions/0400-0499/n-ary-tree-level-order-traversal-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0400-0499/0429-n-ary-tree-level-order-traversal-medium.md",tags:[{label:"Tree",permalink:"/leetcode-the-hard-way/solutions/tags/tree"},{label:"Breadth-First Search",permalink:"/leetcode-the-hard-way/solutions/tags/breadth-first-search"}],version:"current",sidebarPosition:429,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/n-ary-tree-level-order-traversal/",tags:["Tree","Breadth-First Search"]},sidebar:"tutorialSidebar",previous:{title:"0421 - Maximum XOR of Two Numbers in an Array",permalink:"/leetcode-the-hard-way/solutions/0400-0499/maximum-xor-of-two-numbers-in-an-array"},next:{title:"0435 - Non-overlapping Intervals (Medium)",permalink:"/leetcode-the-hard-way/solutions/0400-0499/non-overlapping-intervals-medium"}},c={},p=[{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: BFS",id:"approach-1-bfs",level:2}],h=(r="SolutionAuthor",function(e){return console.warn("Component "+r+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",e)}),m={toc:p};function v(e){var t=e.components,n=(0,l.Z)(e,i);return(0,a.kt)("wrapper",(0,o.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"0429---n-ary-tree-level-order-traversal-medium"},"0429 - N-ary Tree Level Order Traversal (Medium)"),(0,a.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,a.kt)("p",null,"Given an n-ary tree, return the ",(0,a.kt)("em",{parentName:"p"},"level order")," traversal of its nodes' values."),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Nary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples).")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: root = [1,null,3,2,4,null,5,6]\nOutput: [[1],[3,2,4],[5,6]]\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\nOutput: [[1],[2,3,4,5],[6,7,8,9,10],[11,12,13],[14]]\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The height of the n-ary tree is less than or equal to ",(0,a.kt)("inlineCode",{parentName:"li"},"1000")),(0,a.kt)("li",{parentName:"ul"},"The total number of nodes is between ",(0,a.kt)("inlineCode",{parentName:"li"},"[0, 104]"))),(0,a.kt)("h2",{id:"approach-1-bfs"},"Approach 1: BFS"),(0,a.kt)(h,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"/*\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    vector<Node*> children;\n\n    Node() {}\n\n    Node(int _val) {\n        val = _val;\n    }\n\n    Node(int _val, vector<Node*> _children) {\n        val = _val;\n        children = _children;\n    }\n};\n*/\n\n// Time Complexity: O(N) where N is the number of nodes in the tree\n// Space Complexity: O(M): where N is the maximum number in the tree at any level\nclass Solution {\npublic:\n    // The idea is to use BFS, which is a common way to traverse the tree level by level\n    // For a standard BFS, we can use queue to push the first root node into a queue\n    // Then remove the front of the queue, add its children to back of the queue\n    // Do the above steps until the queue is empty\n    // In this question, we need to extra thing which is to push the each value of the nodes level by level\n    // We can simply use `level` to store the values of the nodes at current level, \n    // and add it back to `ans` once we've processed all nodes at that level\n    vector<vector<int>> levelOrder(Node* root) {\n        // the total number of nodes is between [0, 10 ^ 4]\n        // check if root is nullptr to cover 0 node case\n        if(!root)  return {};\n        // init ans\n        vector<vector<int>> ans;\n        // standard bfs approach\n        queue<Node*> q;\n        // start with the root node\n        q.push(root); \n        // do the following logic when the queue is not empty\n        while(!q.empty()) {\n            // get the queue size\n            int n = q.size(); \n            // level is used to store all the node values at the current level\n            vector<int> level;\n            // for each element in the current queue\n            for(int i = 0; i < n; i++){\n                //get the first node from the queue\n                Node* node = q.front();\n                // pop it\n                q.pop();\n                // add it to level\n                level.push_back(node->val);\n                // this node may include other nodes, we add them all to the queue\n                for(auto n : node->children) q.push(n); \n            }\n            // we've processed this level, add it to ans\n            ans.push_back(level);\n        }\n        // return final ans\n        return ans;\n    }\n};\n")),(0,a.kt)(h,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},'"""\n# Definition for a Node.\nclass Node:\n    def __init__(self, val=None, children=None):\n        self.val = val\n        self.children = children\n"""\n\n# Time Complexity: O(N) where N is the number of nodes in the tree\n# Space Complexity: O(M): where M is the maximum number in the tree at any level\nclass Solution:\n    # The idea is to use BFS, which is a common way to traverse the tree level by level\n    # For a standard BFS, we can use queue to push the first root node into a queue\n    # Then remove the front of the queue, add its children to back of the queue\n    # Do the above steps until the queue is empty\n    # In this question, we need to extra thing which is to push the each value of the nodes level by level\n    # We can simply use `level` to store the values of the nodes at current level, \n    # and add it back to `ans` once we\'ve processed all nodes at that level\n    def levelOrder(self, root: \'Node\') -> List[List[int]]:\n        # the total number of nodes is between [0, 10 ^ 4]\n        # check if root is None to cover 0 node case\n        if not root: return []\n        # init ans\n        ans = []\n        # standard bfs approach\n        # start with the root node\n        q = deque([root])\n        # do the following logic when the queue is not empty\n        while q:\n            # level is used to store all the node values at the current level\n            level = []\n            # for each element in the current queue\n            for i in range(len(q)):\n                #get the first node from the queue and pop it\n                node = q.popleft()\n                # add it to level\n                level += [node.val]\n                # this node may include other nodes, we add them all to the queue\n                for n in node.children: q.append(n)\n            # we\'ve processed this level, add it to ans\n            ans += [level]\n        # return final ans\n        return ans\n')))}v.isMDXComponent=!0}}]);