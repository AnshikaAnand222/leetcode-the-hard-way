"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[48791],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return c}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),m=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=m(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=m(n),c=a,f=d["".concat(s,".").concat(c)]||d[c]||p[c]||i;return n?r.createElement(f,o(o({ref:t},u),{},{components:n})):r.createElement(f,o({ref:t},u))}));function c(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var m=2;m<i;m++)o[m]=n[m];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},54783:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return h},frontMatter:function(){return l},metadata:function(){return m},toc:function(){return p}});var r=n(87462),a=n(63366),i=(n(67294),n(3905)),o=["components"],l={description:"Author: @wingkwong, @ganajayant | https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/"},s="0034 - Find First and Last Position of Element in Sorted Array (Medium)",m={unversionedId:"0000-0099/find-first-and-last-position-of-element-in-sorted-array-medium",id:"0000-0099/find-first-and-last-position-of-element-in-sorted-array-medium",title:"0034 - Find First and Last Position of Element in Sorted Array (Medium)",description:"Author: @wingkwong, @ganajayant | https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/",source:"@site/solutions/0000-0099/0034-find-first-and-last-position-of-element-in-sorted-array-medium.md",sourceDirName:"0000-0099",slug:"/0000-0099/find-first-and-last-position-of-element-in-sorted-array-medium",permalink:"/leetcode-the-hard-way/solutions/0000-0099/find-first-and-last-position-of-element-in-sorted-array-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0000-0099/0034-find-first-and-last-position-of-element-in-sorted-array-medium.md",tags:[],version:"current",sidebarPosition:34,frontMatter:{description:"Author: @wingkwong, @ganajayant | https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/"},sidebar:"tutorialSidebar",previous:{title:"0028 - Implement strStr() (Easy)",permalink:"/leetcode-the-hard-way/solutions/0000-0099/implement-strstr-easy"},next:{title:"0035 - Search Insert Position (Easy)",permalink:"/leetcode-the-hard-way/solutions/0000-0099/search-insert-position-easy"}},u={},p=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Binary Search",id:"approach-1-binary-search",level:2}],d=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",t)}},c=d("Tabs"),f=d("TabItem"),g=d("SolutionAuthor"),y={toc:p};function h(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},y,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"0034---find-first-and-last-position-of-element-in-sorted-array-medium"},"0034 - Find First and Last Position of Element in Sorted Array (Medium)"),(0,i.kt)("h2",{id:"problem-link"},"Problem Link"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/"},"https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/")),(0,i.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,i.kt)("p",null,"Given an array of integers ",(0,i.kt)("inlineCode",{parentName:"p"},"nums")," sorted in non-decreasing order, find the starting and ending position of a given ",(0,i.kt)("inlineCode",{parentName:"p"},"target")," value."),(0,i.kt)("p",null,"If ",(0,i.kt)("inlineCode",{parentName:"p"},"target")," is not found in the array, return ",(0,i.kt)("inlineCode",{parentName:"p"},"[-1, -1]"),"."),(0,i.kt)("p",null,"You must write an algorithm with ",(0,i.kt)("inlineCode",{parentName:"p"},"O(log n)")," runtime complexity."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 1:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Input: nums = [5,7,7,8,8,10], target = 8\nOutput: [3,4]\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 2:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Input: nums = [5,7,7,8,8,10], target = 6\nOutput: [-1,-1]\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 3:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Input: nums = [], target = 0\nOutput: [-1,-1]\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Constraints:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"0 <= nums.length <= 10^5")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-109 <= nums[i] <= 10^9")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"nums")," is a non-decreasing array."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-109 <= target <= 10^9"))),(0,i.kt)("h2",{id:"approach-1-binary-search"},"Approach 1: Binary Search"),(0,i.kt)("p",null,"Prerequisite: ",(0,i.kt)("a",{parentName:"p",href:"../../tutorials/basic-topics/binary-search"},"Binary Search")),(0,i.kt)(c,{mdxType:"Tabs"},(0,i.kt)(f,{value:"c++",label:"C++",mdxType:"TabItem"},(0,i.kt)(g,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int getFirstPosition(vector<int>& nums, int target) {\n        int n = nums.size(), l = 0, r = n - 1;\n        while (l < r) {\n            int m = l + (r - l) / 2;\n            if (target > nums[m]) l = m + 1;\n            else r = m;\n        }\n        return nums[l] == target ? l : -1;\n    }\n    \n    int getLastPosition(vector<int>& nums, int target) {\n        int n = nums.size(), l = 0, r = n - 1;\n        while (l < r) {\n            int m = l + (r - l + 1) / 2;\n            if (target < nums[m]) r = m - 1;\n            else l = m;\n        }\n        return nums[l] == target ? l : -1;\n    }\n    \n    vector<int> searchRange(vector<int>& nums, int target) {\n        int n = nums.size();\n        // handle edge case\n        vector<int> ans = {-1, -1};\n        if (n == 0) return ans;\n        // return the lower bound and upper bound - 1\n        return vector<int> {\n            // if the first position is -1, we can return ans directly\n            getFirstPosition(nums, target), \n            getLastPosition(nums, target)\n        };\n    }\n};\n"))),(0,i.kt)(f,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)(g,{name:"@ganajayant",mdxType:"SolutionAuthor"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    public int[] searchRange(int[] nums, int target) {\n        int start = 0, end = nums.length - 1, firstelement = -1;\n        while (start <= end) {\n            int mid = start + (end - start) / 2;\n            if (nums[mid] == target) {\n                firstelement = mid;\n                end = mid - 1;\n            } else if (nums[mid] > target) {\n                end = mid - 1;\n            } else {\n                start = mid + 1;\n            }\n        }\n        start = 0;\n        end = nums.length - 1;\n        int endelement = -1;\n        while (start <= end) {\n            int mid = start + (end - start) / 2;\n            if (nums[mid] == target) {\n                endelement = mid;\n                start = mid + 1;\n            } else if (nums[mid] > target) {\n                end = mid - 1;\n            } else {\n                start = mid + 1;\n            }\n        }\n        return new int[] { firstelement, endelement };\n    }\n}\n")))))}h.isMDXComponent=!0}}]);